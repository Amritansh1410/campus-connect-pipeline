# Azure DevOps Pipeline for College Attendance System
# Automates deployment across Dev, QA, and Production environments

trigger:
  branches:
    include:
    - main
    - develop

pr:
  branches:
    include:
    - main
    - develop

variables:
  - group: AttendanceSystem-Variables
  - name: nodeVersion
    value: '18.x'
  - name: buildConfiguration
    value: 'production'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build React App'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: ~/.npm
      displayName: 'Cache npm'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run lint
      displayName: 'Run ESLint'
      continueOnError: true

    - script: |
        npm run test -- --coverage --watchAll=false
      displayName: 'Run tests with coverage'
      continueOnError: true

    - script: |
        npm run build
      displayName: 'Build application'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: 'coverage/junit.xml'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'coverage/cobertura-coverage.xml'
      displayName: 'Publish coverage results'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'dist'
        artifactName: 'dist'
      displayName: 'Publish build artifacts'

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDevJob
    displayName: 'Deploy to Dev Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'dist'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Upload to Azure Storage Static Website
                az storage blob upload-batch \
                  --account-name $(devStorageAccount) \
                  --auth-mode key \
                  --destination '$web' \
                  --source $(System.ArtifactsDirectory)/dist \
                  --overwrite true
                
                # Purge CDN if configured
                if [ ! -z "$(devCdnProfile)" ]; then
                  az cdn endpoint purge \
                    --resource-group $(resourceGroup) \
                    --profile-name $(devCdnProfile) \
                    --name $(devCdnEndpoint) \
                    --content-paths '/*'
                fi
            displayName: 'Deploy to Development Storage'

- stage: DeployQA
  displayName: 'Deploy to QA'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToQAJob
    displayName: 'Deploy to QA Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'dist'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Upload to Azure Storage Static Website
                az storage blob upload-batch \
                  --account-name $(qaStorageAccount) \
                  --auth-mode key \
                  --destination '$web' \
                  --source $(System.ArtifactsDirectory)/dist \
                  --overwrite true
                
                # Purge CDN if configured
                if [ ! -z "$(qaCdnProfile)" ]; then
                  az cdn endpoint purge \
                    --resource-group $(resourceGroup) \
                    --profile-name $(qaCdnProfile) \
                    --name $(qaCdnEndpoint) \
                    --content-paths '/*'
                fi
            displayName: 'Deploy to QA Storage'

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployQA
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProdJob
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'dist'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Upload to Azure Storage Static Website
                az storage blob upload-batch \
                  --account-name $(prodStorageAccount) \
                  --auth-mode key \
                  --destination '$web' \
                  --source $(System.ArtifactsDirectory)/dist \
                  --overwrite true
                
                # Purge CDN
                az cdn endpoint purge \
                  --resource-group $(resourceGroup) \
                  --profile-name $(prodCdnProfile) \
                  --name $(prodCdnEndpoint) \
                  --content-paths '/*'
                
                echo "ðŸŽ‰ Production deployment completed successfully!"
            displayName: 'Deploy to Production Storage'

          - script: |
              echo "Deployment completed at: $(date)"
              echo "Environment: Production"
              echo "Storage Account: $(prodStorageAccount)"
              echo "CDN Endpoint: https://$(prodCdnEndpoint).azureedge.net"
            displayName: 'Post-deployment summary'